# Problem Set 2, hangman.py
# Name: 
# Collaborators:
# Time spent:

# Hangman Game
# -----------------------------------
# Helper code
# You don't need to understand this helper code,
# but you will have to know how to use the functions
# (so be sure to read the docstrings!)
import random
import string

WORDLIST_FILENAME = "words.txt"

def load_words():
    """
    Returns a list of valid words. Words are strings of lowercase letters.
    
    Depending on the size of the word list, this function may
    take a while to finish.
    """
    print("Loading word list from file...")
    # inFile: file
    inFile = open(WORDLIST_FILENAME, 'r')
    # line: string
    line = inFile.readline()
    # wordlist: list of strings
    wordlist = line.split()
    print("  ", len(wordlist), "words loaded.")
    return wordlist

def choose_word(wordlist):
    """
    wordlist (list): list of words (strings)
    
    Returns a word from wordlist at random
    """
    return random.choice(wordlist)

# end of helper code

# -----------------------------------

# Load the list of words into the variable wordlist
# so that it can be accessed from anywhere in the program
wordlist = load_words()
secret_word = choose_word(wordlist)



def is_word_guessed(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing; assumes all letters are
      lowercase
    letters_guessed: list (of letters), which letters have been guessed so far;
      assumes that all letters are lowercase
    returns: boolean, True if all the letters of secret_word are in letters_guessed;
      False otherwise
    '''
    for i in range(len(secret_word)):
        if secret_word[i] not in letters_guessed:
            return False
    return True
        

def get_guessed_word(secret_word, letters_guessed):
    '''
    secret_word: string, the word the user is guessing
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string, comprised of letters, underscores (_), and spaces that represents
      which letters in secret_word have been guessed so far.
    '''
    displayed_letters_remaining = ''
    for i in range(len(secret_word)):
        if secret_word[i] in letters_guessed:
            displayed_letters_remaining += secret_word[i] + ' '
        else:
            displayed_letters_remaining += '_ '
    return displayed_letters_remaining


def get_available_letters(letters_guessed):
    
    '''
    letters_guessed: list (of letters), which letters have been guessed so far
    returns: string (of letters), comprised of letters that represents which letters have not
      yet been guessed.
    '''
    letters_remaining_to_guess = string.ascii_lowercase
    letters_remaining_to_guess1 = '' 
    for i in range(len(letters_remaining_to_guess)):
        if letters_remaining_to_guess[i] not in letters_guessed:
            letters_remaining_to_guess1 += letters_remaining_to_guess[i]
        else:
            letters_remaining_to_guess1 += ''
    return letters_remaining_to_guess1


def hangman(secret_word):     
    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses

    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Remember to make
      sure that the user puts in a letter!
    
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
    
    Follows the other limitations detailed in the problem write-up.
    '''
    load_words()
    choose_word(wordlist)
    letters_guessed = ''
    warnings = 3
    guesses = 6
    print('I am thinking of a word that is ', len(secret_word), ' letters long.')
    
    while guesses != 0 and is_word_guessed(secret_word, letters_guessed) == False:
        print('You have ' + str(warnings) + ' warnings left.')
        print('You have ' + str(guesses) + ' guesses left.')
        print('Letters Available: ' + get_available_letters(letters_guessed))                      #Prints letters left available for guessing
        print(get_guessed_word(secret_word, letters_guessed))               #Prints out visual word remaining
#####################Input Validation#######################
        letter_guessed = input("Please select a letter from the list above: ")
        while letter_guessed in letters_guessed and guesses !=0:
            if warnings != 0:
                warnings -= 1
            elif warnings == 0:
                guesses -= 1
            print('You have ' + str(warnings) + ' warnings left.')
            print('You have ' + str(guesses) + ' guesses left.')
            letter_guessed = input('That is not a valid letter. You have ' + str(warnings) + ' warnings left.  Selected a valid letter from the list above: ')        
        letters_guessed += letter_guessed
#############################################################
        if is_word_guessed(secret_word, letters_guessed) == True:    #Determines if the word is guessed: Scans through each letter of secret word and if one is missing returns False
            return print(secret_word, ': You win!!!')
        if letter_guessed[-1] not in secret_word:                    #Checks most recent input to see if in secret word.  If not in it removes a guess
            guesses -= 1
        if guesses == 0:
            return print('Sorry, you have run out of guesses, you lose! The secret word was ' + secret_word)
        print('--------------------------------')
    pass

# -----------------------------------

# hangman(secret_word)


def match_with_gaps(my_word, other_word):
    '''
    my_word: string with _ characters, current guess of secret word
    other_word: string, regular English word
    returns: boolean, True if all the actual letters of my_word match the 
        corresponding letters of other_word, or the letter is the special symbol
        _ , and my_word and other_word are of the same length;
        False otherwise: 
    '''
    modify_word = ''
    for i in range(len(my_word)):                          #This modifys the printed word and compares it to 
        if my_word[i] == '_':
            modify_word+= '!'
        elif my_word[i] == ' ':
            modify_word += ''
        else:
            modify_word += my_word[i]
    # print(modify_word)
    # print(other_word)
    if len(modify_word) != len(other_word):
        return False
    for i in range(len(modify_word)):
        if modify_word[i] != other_word[i] and modify_word[i] != '!':
            return False
    return True


def show_possible_matches(my_word, other_word, letters_guessed):
    '''
    my_word: string with _ characters, current guess of secret word
    returns: nothing, but should print out every word in wordlist that matches my_word
             Keep in mind that in hangman when a letter is guessed, all the positions
             at which that letter occurs in the secret word are revealed.
             Therefore, the hidden letter(_ ) cannot be one of the letters in the word
             that has already been revealed.
    '''

    for i in range(len(letters_guessed)):
        if letters_guessed[i] in my_word and letters_guessed[i] not in other_word:
            return False
    return True

def hangman_with_hints(secret_word):
    load_words()
    choose_word(wordlist)
    letters_guessed = ''
    warnings = 3
    guesses = 6
    print('I am thinking of a word that is ', len(secret_word), ' letters long.')
    
    while guesses != 0 and is_word_guessed(secret_word, letters_guessed) == False:
        print('You have ' + str(warnings) + ' warnings left.')
        print('You have ' + str(guesses) + ' guesses left.')
        print('Letters Available: ' + get_available_letters(letters_guessed))             #Prints letters left available for guessing
        print(get_guessed_word(secret_word, letters_guessed))                             #Prints out visual word remaining
        my_word = get_guessed_word(secret_word, letters_guessed)

########################### Input #############################
        letter_guessed = input("Please select a letter from the list above or '*' for a hint: ")
        print_hints = ''
######################## Hint Output ##########################
        if letter_guessed == '*':
            for i in range(len(wordlist)):
                other_word = wordlist[i]
                if match_with_gaps(my_word, other_word) == True and show_possible_matches(my_word, other_word, letters_guessed) == True:
                    print_hints += other_word + ' '
            print(print_hints)
            
            letter_guessed = input("Please select a letter from the list above: ")
##################### Input Validation ######################
        while letter_guessed in letters_guessed and guesses !=0:
            if warnings != 0:
                warnings -= 1
            elif warnings == 0:
                guesses -= 1
            print('You have ' + str(warnings) + ' warnings left.')
            print('You have ' + str(guesses) + ' guesses left.')
            letter_guessed = input('That is not a valid letter. You have ' + str(warnings) + ' warnings left.  Selected a valid letter from the list above: ')        
        letters_guessed += letter_guessed

        if is_word_guessed(secret_word, letters_guessed) == True:    #Determines if the word is guessed: Scans through each letter of secret word and if one is missing returns False
            return print(secret_word, ': You win!!!')
        if letter_guessed[-1] not in secret_word:                    #Checks most recent input to see if in secret word.  If not in it removes a guess
            guesses -= 1
        if guesses == 0:
            return print('Sorry, you have run out of guesses, you lose! The secret word was ' + secret_word)
        print('--------------------------------')

    '''
    secret_word: string, the secret word to guess.
    
    Starts up an interactive game of Hangman.
    
    * At the start of the game, let the user know how many 
      letters the secret_word contains and how many guesses s/he starts with.
      
    * The user should start with 6 guesses
    
    * Before each round, you should display to the user how many guesses
      s/he has left and the letters that the user has not yet guessed.
    
    * Ask the user to supply one guess per round. Make sure to check that the user guesses a letter
      
    * The user should receive feedback immediately after each guess 
      about whether their guess appears in the computer's word.

    * After each guess, you should display to the user the 
      partially guessed word so far.
      
    * If the guess is the symbol *, print out all words in wordlist that
      matches the current guessed word. 
    
    Follows the other limitations detailed in the problem write-up.
    '''
    # FILL IN YOUR CODE HERE AND DELETE "pass"

# When you've completed your hangman_with_hint function, comment the two similar
# lines above that were used to run the hangman function, and then uncomment
# these two lines and run this file to test!
# Hint: You might want to pick your own secret_word while you're testing.

# secret_word = 'cabs'
hangman_with_hints(secret_word)
# if __name__ == "__main__":
#     pass

    # To test part 2, comment out the pass line above and
    # uncomment the following two lines.
    
    # secret_word = choose_word(wordlist)
    # hangman(secret_word)

###############
    
    # To test part 3 re-comment out the above lines and 
    # uncomment the following two lines. 
    
    #secret_word = choose_word(wordlist)
    #hangman_with_hints(secret_word)
